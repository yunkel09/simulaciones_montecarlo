\chapter{Nuevo Producto}


 \begin{itemize}[itemsep=1ex]
 
  \item Usted está tratando de hacer la planificación financiera para el desarrollo de un
  nuevo producto, pero no cuenta con información exacta para realizar el análisis de los
  resultados que va a obtener.
  
  \item Los datos que necesita para realizar el análisis son los siguientes: Ventas (en
  unidades),  Precio de Venta (en \$/unidad), Costo de Mano de Obra (en \$/unidad) y Costo de
  Materiales (en \$/unidad).
  
  \item Sin embargo, su departamento de finanzas cuenta con suficiente información histórica
  para productos similares, los cuales se presentan en el archivo adjunto.
  
  \item Basado en los datos, usted observa que las ventas presentan una distribución bastante
  cercana a una distribución normal, por lo que procede a calcular los parámetros de la
  misma.
  
  \item También puede ver que el precio de venta se asemeja a una distribución triangular,
  por lo que basado en esos datos, nuevamente calcula los parámetros de la distribución.
  
  \item El costo de los materiales parece que se distribuye uniformemente, por lo que usted
  obtiene el valor mínimo y el máximo.
  
  \item El costo de la mano de obra parece que también presenta una distribución uniforme,
  entonces a partir de los datos se obtiene el mínimo y el máximo.
  
  \item El presupuesto de gastos administrativos y de publicidad para el primer año es de
  \$400.000 y \$600.000 respectivamente.
  
  \item Con los datos obtenidos, usted construye un modelo financiero que le permite estimar
  los ingresos para este nuevo producto.  La gerencia financiera le indica que ellos esperan
  ingresos anuales de \$200,000 para este producto por lo que le piden estimar la
  probabilidad de alcanzar dicha meta.
  
 \end{itemize}

\section{Carga}

<<>>=
datos <- read_csv(file = "datoshist.csv", lazy = FALSE)
@

\section{Calcular estadísticos}

<<>>=
est <- resumir(datos)
@

<<>>=
est |> tabla("Estadísticos")
@

\section{Explorar Distribuciones}

<<>>=
pal    <- palette_OkabeIto[1:ncol(datos)]
ndv    <- names(datos)
@

<<fig.width=7, fig.asp=1>>=
map2(.x = ndv, .y = pal, ~ estimar_densidad(df = datos, d = .x, color = .y)) %>%   
 reduce(.f = `+`) + 
 plot_layout(ncol = 2) +
 plot_annotation(title    = "Análisis de Distribución", 
                 subtitle = "Estimación de densidad no paramétrica")
@

\section{Bondad de Ajuste}

Con base a \citep[pag. ~2]{delignette-muller_fitdistrplus_2015}

\begin{quote}
Antes de ajustar una o más distribuciones a un conjunto de datos, generalmente es necesario
elegir buenos candidatos entre un conjunto predefinido de distribuciones. Esta elección puede
estar guiada por el conocimiento de los procesos estocásticos que rigen la variable modelada,
o, en ausencia de conocimiento sobre el proceso subyacente, por la observación de su
distribución empírica. Para ayudar al usuario en esta elección, desarrollamos funciones para
trazar y caracterizar la distribución empírica.
\end{quote}


<<>>=
tipodis <- c("norm", "lnorm", "gamma", "unif")
@

A continuación, crearemos una serie de funciones que servirán para lograr ayudar a 
determinar el tipo de distribuición.

<<>>=
convertir_a_lista <- function(.df) {
.df |>
 drop_na() |> 
 pivot_longer(cols = everything(), names_to = "variable", values_to = "valor") |>
 split(~ variable) |>
 map(~ .x |>
      pull(valor))
}
@

<<>>=
obtener_nombres <- function(lista_valores, tipodis) {
 cross(list(data = names(lista_valores), distr = tipodis)) |> 
  map(~ .x[[1]]) |>
  as.character() |> paste0("_", rep(tipodis, each = length(tipodis))) |> 
  unique()
}
@

<<>>=
crear_lista_cross <- function(lista_valores, tipodis, nombres_cruza) {
 cross(list(data = lista_valores, distr = tipodis)) |> 
  set_names(nombres_cruza)
}
@

<<>>=
crear_ajustes <- function(lista_cartesi, fitdistx) {
list_with_errors <-  lista_cartesi |> 
  map(lift(fitdistx, discrete = F)) |> 
  map(~ compact(.x)) |> 
  map(~ .x[[1]])

list_without_errors <- list_with_errors[list_with_errors |>
                                         map(~ class(.x)[[1]]) |>
                                         map_lgl(~ .x == "fitdist")]
}
@

<<>>=
crear_tabla_gof <- function(lista_ajustad, nombres_dfnum) {
a <-  nombres_dfnum |>
  map(~ lista_ajustad[str_detect(names(lista_ajustad), .x)])

  map(~ gofstat(.x)[c(6, 8, 10, 12, 13)]) |> 
  set_names(nombres_dfnum) |> 
  map_dfr(~ bind_rows(.x, .id = "test"), .id = "variable") |> 
  mutate(across(where(is.numeric), ~ na_if(.x, y = Inf)))
}
@

<<>>=
validar_gof <- function(df, tipodis) {
 dataframe_num <- df[sapply(df, is.numeric)]
 nombres_dfnum <- names(dataframe_num)
 lista_valores <- convertir_a_lista(dataframe_num)
 nombres_cruza <- obtener_nombres(lista_valores, tipodis)
 lista_cartesi <- crear_lista_cross(lista_valores, tipodis, nombres_cruza)
 fitdistx      <- safely(fitdist)
 lista_ajustad <- crear_ajustes(lista_cartesi, fitdistx)
 crear_tabla_gof(lista_ajustad, nombres_dfnum) |> clean_names()
}
@

<<echo=FALSE>>=
scoring_gof <- function(tabla_gof) {
 mk_00 <- c("norm" = "normal",
           "lnorm" = "log_normal",
           "unif"  = "uniforme")
 modf <- . %>% str_remove_all("x\\d_mle_") %>% recode(!!!mk_00)
 tabla_gof |> 
  mutate(distribucion = names(tabla_gof)[apply(tabla_gof, MARGIN = 1, FUN = which.min)],
        across(distribucion, modf)) |> 
  suppressWarnings() |> 
  count(variable, distribucion, name = "puntuacion") |> 
  group_by(variable) |> 
  filter(puntuacion == max(puntuacion)) |> 
  ungroup()
}
@


<<echo=FALSE>>=
gof <- validar_gof(df = datos, distr = tipodis)
@

<<>>=
gof |> tabla("GOF")
@

<<>>=
gof |> 
 scoring_gof() |> 
 tabla("Distribución más probable con base a scoring")
@


TODO: 





























